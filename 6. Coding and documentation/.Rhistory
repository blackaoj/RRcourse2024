# Sets the path to the parent directory of RR classes
setwd("C:\\Users\\lulut\\Desktop\\forked\\6. Coding and documentation")
task_data = read.csv("C:\\Users\\lulut\\Desktop\\forked\\Data\\onet_tasks.csv")
# read employment data from Eurostat
# These datasets include quarterly information on the number of workers in specific
# 1-digit ISCO occupation categories. (Check here for details: https://www.ilo.org/public/english/bureau/stat/isco/isco08/)
library(readxl)
#Read data and create variables
for (i in 1:9) {
assign(paste0("isco", i), read_excel("C:\\Users\\lulut\\Desktop\\forked\\Data\\Eurostat_employment_isco.xlsx", sheet=paste0("ISCO", i)))
}
# We will focus on three countries, but perhaps we could clean this code to allow it
# to easily run for all the countries in the sample?
file_path <- "C:\\Users\\lulut\\Desktop\\forked\\Data\\Eurostat_employment_isco.xlsx"
# This will calculate worker totals in each of the chosen countries.
sheet_names <- paste0("ISCO", 1:9)
isco_data <- list()
for (sheet in sheet_names) {
isco_data[[sheet]] <- read_excel(file_path, sheet = sheet)
}
countries <- c("Belgium", "Spain", "Poland")
total_counts <- setNames(vector("list", length(countries)), countries)
#Aggregate data for selected countries
for (country in countries) {
total_counts[[country]] <- Reduce(`+`, lapply(isco_data, `[[`, country))
}
# Access the totals
total_Belgium <- total_counts$Belgium
total_Spain <- total_counts$Spain
total_Poland <- total_counts$Poland
# Let's merge all these datasets. We'll need a column that stores the occupation categories:
for (i in 1:9) {
assign(paste0("isco", i), data.frame(ISCO = i))
}
# and this gives us one large file with employment in all occupations.
all_data <- do.call(rbind, mget(paste0("isco", 1:9)))
# We have 9 occupations and the same time range for each, so we an add the totals by
# adding a vector that is 9 times the previously calculated totals
country_totals <- data.frame(
total_Belgium = rep(total_Belgium, each = 9),
total_Spain = rep(total_Spain, each = 9),
total_Poland = rep(total_Poland, each = 9)
)
all_data <- cbind(all_data, country_totals)
# And this will give us shares of each occupation among all workers in a period-country
countries <- c("Belgium", "Spain", "Poland")
for (country in countries) {
all_data[[paste0("share_", country)]] <- all_data[[country]] / all_data[[paste0("total_", country)]]
}
###### Sets the path
setwd("C:\\Users\\lulut\\Desktop\\forked\\6. Coding and documentation")
task_data_path <- paste(path, '/Data/onet_tasks.csv', sep = '')
###### Sets the path
path <- '/Users/lulut/Desktop/forked/6. Coding and documentation'
setwd(path)
task_data_path <- paste(path, '/Data/onet_tasks.csv', sep = '')
isco_data_path <- paste(path, '/Data//Eurostat_employment_isco.xlsx', sep = '')
###### Sets the path
path <- '/Users/lulut/Desktop/forked/6. Coding and documentation'
setwd(path)
task_data_path <- paste(path, '/Data/onet_tasks.csv', sep = '')
isco_data_path <- paste(path, '/Data//Eurostat_employment_isco.xlsx', sep = '')
task_datapath <- paste(path, '/Data/onet_tasks.csv', sep = '')
isco_datapath <- paste(path, '/Data//Eurostat_employment_isco.xlsx', sep = '')
data_read <- function(data_path, sheet_name = NULL){
names <- strsplit(data_path, split = '\\.')[[1]]
suffix <- names[length(names)]
# Ensure the file extension is either 'csv' or 'xlsx'
stopifnot(suffix %in% c('csv', 'xlsx'))
# If the file is an Excel file, ensure sheet_name is not NULL
if (suffix == 'xlsx'){
stopifnot(!is.null(sheet_name))
}
# Read the data based on the file type
if (suffix == 'csv'){ # Process CSV file
data <- read.csv(data_path, stringsAsFactors = FALSE)
} else { # Process Excel file
data <- read_xlsx(data_path, sheet = sheet_name)
}
# Return the read data
return(data)
}
task_data <- read_data(task_datapath, sheet_name = NULL)
task_data <- data_read(task_datapath, sheet_name = NULL)
#Hanwen Miao(436819)
#Load packages
library(dplyr)
library(readxl)
library(glue)
library(stringr)
library(Hmisc)
###### Sets the path
path <- '/Users/lulut/Desktop/forked/6. Coding and documentation'
setwd(path)
task_datapath <- paste(path, '/Data/onet_tasks.csv', sep = '')
isco_datapath <- paste(path, '/Data//Eurostat_employment_isco.xlsx', sep = '')
######Load data by function
data_read <- function(data_path, sheet_name = NULL){
names <- strsplit(data_path, split = '\\.')[[1]]
suffix <- names[length(names)]
# Ensure the file extension is either 'csv' or 'xlsx'
stopifnot(suffix %in% c('csv', 'xlsx'))
# If the file is an Excel file, ensure sheet_name is not NULL
if (suffix == 'xlsx'){
stopifnot(!is.null(sheet_name))
}
# Read the data based on the file type
if (suffix == 'csv'){ # Process CSV file
data <- read.csv(data_path, stringsAsFactors = FALSE)
} else { # Process Excel file
data <- read_xlsx(data_path, sheet = sheet_name)
}
# Return the read data
return(data)
}
task_data <- data_read(task_datapath, sheet_name = NULL)
head(task_data)
# Define the task data file path
task_datapath <- "C:/Users/lulut/Desktop/forked/Data/onet_tasks.csv"
# Attempt to read the data
task_data <- data_read(task_datapath)
View(task_data)
# Check the head of the data to ensure it is loaded correctly
head(task_data)
# read employment data from Eurostat
# These datasets include quarterly information on the number of workers in specific
# 1-digit ISCO occupation categories. (Check here for details: https://www.ilo.org/public/english/bureau/stat/isco/isco08/)
#Read data and create variables
for (i in 1:9) {
assign(paste0("isco", i), data_read(isco_datapath, sheet_name = paste0("ISCO", i)))
}
task_datapath <- paste(path, '/Users/lulut/Desktop/forked/Data/onet_tasks.csv', sep = '')
isco_datapath <- paste(path, '/Users/lulut/Desktop/forked/Data//Eurostat_employment_isco.xlsx', sep = '')
# read employment data from Eurostat
# These datasets include quarterly information on the number of workers in specific
# 1-digit ISCO occupation categories. (Check here for details: https://www.ilo.org/public/english/bureau/stat/isco/isco08/)
#Read data and create variables
for (i in 1:9) {
assign(paste0("isco", i), data_read(isco_datapath, sheet_name = paste0("ISCO", i)))
}
###### Sets the path (Copy the data file to my path)
path <- '/Users/lulut/Desktop/forked/6. Coding and documentation'
setwd(path)
task_datapath <- paste(path, '/Data/onet_tasks.csv', sep = '')
# read employment data from Eurostat
# These datasets include quarterly information on the number of workers in specific
# 1-digit ISCO occupation categories. (Check here for details: https://www.ilo.org/public/english/bureau/stat/isco/isco08/)
#Read data and create variables
for (i in 1:9) {
assign(paste0("isco", i), data_read(isco_datapath, sheet_name = paste0("ISCO", i)))
}
###### Sets the path (Copy the data file to my path)
path <- '/Users/lulut/Desktop/forked/6. Coding and documentation'
setwd(path)
task_datapath <- paste(path, '/Data/onet_tasks.csv', sep = '')
isco_datapath <- paste(path, '/Data/Eurostat_employment_isco.xlsx', sep = '')
######Load data by function
data_read <- function(data_path, sheet_name = NULL){
names <- strsplit(data_path, split = '\\.')[[1]]
suffix <- names[length(names)]
# Ensure the file extension is either 'csv' or 'xlsx'
stopifnot(suffix %in% c('csv', 'xlsx'))
# If the file is an Excel file, ensure sheet_name is not NULL
if (suffix == 'xlsx'){
stopifnot(!is.null(sheet_name))
}
# Read the data based on the file type
if (suffix == 'csv'){ # Process CSV file
data <- read.csv(data_path, stringsAsFactors = FALSE)
} else { # Process Excel file
data <- read_xlsx(data_path, sheet = sheet_name)
}
# Return the read data
return(data)
}
# read task data file path
task_datapath <- "C:/Users/lulut/Desktop/forked/Data/onet_tasks.csv"
task_data <- data_read(task_datapath)
head(task_data)
# read employment data from Eurostat
# These datasets include quarterly information on the number of workers in specific
# 1-digit ISCO occupation categories. (Check here for details: https://www.ilo.org/public/english/bureau/stat/isco/isco08/)
#Read data and create variables
for (i in 1:9) {
assign(paste0("isco", i), data_read(isco_datapath, sheet_name = paste0("ISCO", i)))
}
a <-seq(1,20,by=2)
a
b <-rep(1:3,times = 3)
b
sum_a <-sum(a)
sum_a
t<-a[c(1,3,5)]
t
a<- c(2,20,by=2)
a
a<- seq(2,20,by=2)
a
b<-c(1,2,3,4,5)
c<-c(6,7,8,9,10)
sum_bc <- b+c
sum_bc
x <-seq(5,30,by=5)
element_x <-x[c(3,5)]
element_x
d <-seq(1,20,by=1)
element_dayu15<-d[d>15]
element_dayu15
e <-seq(1,10,by=1)
e[e %% 2 == 0 ]<- 0
e
f <-c(3,7,1,9,5,6)
length(f)
g<-c(12,4,19,33,7)
max(g)
min(g)
h <-rep("a", "b", "c" ,times=3)
h<-c(20,5,15,10)
sort_h <-sort(h)
sort_h
i <- rep("a", "b", "c":times = 3 )
i <- rep("a", "b", "c": times = 3 )
i <- c("a", "b", "c" )
i <- c("a", "b", "c" )
repeat_i <-rep(i,each =3)
repeat_i
